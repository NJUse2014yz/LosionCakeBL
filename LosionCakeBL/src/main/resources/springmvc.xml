<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
	 http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
	 http://www.springframework.org/schema/context
	 http://www.springframework.org/schema/context/spring-context-3.0.xsd
	 http://www.springframework.org/schema/mvc
	 http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd">


    <!-- 激活@Controller模式 -->
    <mvc:annotation-driven/>
    <!-- 对包中的所有类进行扫描，以完成Bean创建和自动依赖注入的功能 需要更改 -->
    <context:component-scan base-package="com.edu.nju.wel.controller"/>

    <mvc:interceptors>
        <mvc:interceptor>
            <mvc:mapping path="/**"/>
            <!-- 定义在mvc:interceptor下面的表示是对特定的请求才进行拦截的 -->
            <bean class="com.edu.nju.wel.interceptor.TranslateInterceptor"/>
        </mvc:interceptor>
    </mvc:interceptors>


    <!-- 主要是进行Controller 和 URL 的一些注解绑定，这里可以进行转换器配置:只有配置好了转换器才能进行类与JSON和XML的转换，当然只是针对基于转换器协商资源表述 -->
    <bean class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter" />


    <!-- XML 与 Java 数据转换  -->
    <bean id="jaxbMarshaller" class="org.springframework.oxm.jaxb.Jaxb2Marshaller">
        <property name="classesToBeBound">
            <list>
                <!--common XML 映射  JavaBean 注册  -->
                <value>com.edu.nju.wel.domain.User</value>
                <!-- 不需要在这里绑定，原因是controller里采用ResponseBody进行返回 -->
                <!-- <value>com.hnust.bean.Message</value>  -->
            </list>
        </property>
    </bean>

    <!-- 基于视图渲染进行协商资源表述  -->
    <bean class="org.springframework.web.servlet.view.ContentNegotiatingViewResolver">
        <!-- restful 是否采用扩展名的方式确定内容格式，id.json 返回JSON格式 -->
        <property name="favorPathExtension" value="true"></property>

        <!-- restful 是否采用参数支持确定内容格式，id?format=json 返回JSON格式 -->
        <property name="favorParameter" value="true"></property>

        <!-- restful 是否忽略掉accept header，Accept:application/json -->
        <property name="ignoreAcceptHeader" value="false"></property>

        <!-- 基于视图按顺序解析  -->
        <property name="order" value="1" />

        <!-- 对采用扩展名，参数新式的 URL 进行获取对应的 accept  -->
        <property name="mediaTypes">
            <map>
                <entry key="json" value="application/json"/>
                <entry key="xml" value="application/xml"/>
                <entry key="html" value="text/html"/>
            </map>
        </property>

        <!-- 如果扩展名，参数甚至header 信息都没有找到对应的accept时  -->
        <property name="defaultContentType" value="text/html"/>

        <!-- 采用对应的视图进行渲染  -->
        <property name="defaultViews">
            <list >
                <!-- 转换Java对象为XML格式数据 -->
                <bean class="org.springframework.web.servlet.view.xml.MarshallingView">
                    <constructor-arg ref="jaxbMarshaller" />
                </bean>

                <!-- 转换Java对象为JSON 格式数据 -->
                <bean class="org.springframework.web.servlet.view.json.MappingJacksonJsonView"/>
            </list>
        </property>
        <!-- 采用对应的视图进行渲染  -->
        <property name="viewResolvers">
            <list >
                <!-- 查找在上下文中定义了ID的Bean，并且定位该ID  -->
                <bean class="org.springframework.web.servlet.view.BeanNameViewResolver"/>
                <!-- 对Controller中返回的视图实例进行解析，并且组装URL定位到对应的资源  -->
                <bean id="viewResolver" class="org.springframework.web.servlet.view.UrlBasedViewResolver">
                    <property name="viewClass" value="org.springframework.web.servlet.view.JstlView"/>
                    <property name="prefix" value="/WEB-INF/jsp/"/>
                    <property name="suffix" value=".jsp"/>
                </bean>
            </list>
        </property>
    </bean>
</beans>